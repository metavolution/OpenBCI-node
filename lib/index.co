Fs = require 'fs'
Events = require 'events'
eegdriver = {} #require './eegdriver.node'

class EEGDriver extends Events.EventEmitter
	(device, opts = {}) ->
		console.log "creating EEGDriver with:", device
		driver = @driver = new eegdriver.EEGDriver (err, data) ->
			console.log "eegdriver event: ", err, data
			if not err then @emit "data", data
		
		@stream = Fs.createReadStream device, {flags: opts.flags || 'r'}
		@stream.on 'open', (fd) ->
			console.log "opened stream", fd
			@fd = fd
			if typeof opts.cb is \function then cb 'open', fd

		@stream.on 'data', (data) ->
			if typeof opts.cb is \function then cb 'data', data
			else for x, i of data
				driver.gobble x


class EDFReader extends Events.EventEmitter
	(device, opts = {}) ->
		console.log "-> EDFReader"
		Fs.readFile device, (err, data) ~>
			@buf = data
			@i = 0
			@recordNum = 0
			@sampleNum = 0
			
			@header = {
				dataFormat: @Str 8
				localPatient: @Str 80
				localRecorder: @Str 80
				recordingStartDate: @Str 8
				recordingStartTime: @Str 8
				headerRecordBytes: 1*@Str 8
				manufacturerID: @Str 44
				dataRecordCount: 1*@Str 8
				dataRecordSeconds: 1*@Str 8
				dataRecordChannels: 1*@Str 4
				chan: []
			}
			
			@header.headerRecordBytes = 256 * (@header.dataRecordChannels+1)
			ch = {
				label: 16
				transducer: 80
				dimUnit: 8
				physMin: 8
				physMax: 8
				digiMin: 8
				digiMax: 8
				prefiltering: 80
				sampleCount: 8
				reserved: 32
			}
			
			for k, v in ch
				for i from 0 til @header.dataRecordChannels
					if typeof @header.chan[i] is not \object then @header.chan[i] = {}
					vv = @Str v
					@header.chan[i][k] = if isFinite vv then 1*vv else vv
			
			@sampleCount = @header.chan[0].sampleCount
			@dataRecordChunkSize = @sampleCount*@header.dataRecordChannels*2
			@dataRecordCount = Math.floor (@buf.length-@header.headerRecordBytes) / @dataRecordChunkSize
			@start!
			
	start: ->
		# PROBLEM: we assume all channels have the same samples/sec. it's likely, but not assumed
		@interval = @header.dataRecordSeconds * @header.chan[0].sampleCount / 1000
		@state = 'playing'
		@startTime = new Date!.getTime!
		@updateLoop!
		console.log "set interval for #{@header.dataRecordSeconds * @header.chan[0].sampleCount / 1000}"
		
	stop: ->
		@state = 'paused'
			
	updateLoop: ->
		sample = new Array @header.dataRecordChannels
		offset = @header.headerRecordBytes + (@recordNum*@dataRecordChunkSize)
		for i from 0 til @header.dataRecordChannels
			# PROBLEM: this isn't safe if the platform is big endian
			sample[i] = @buf.readInt16LE offset+2*(@sampleNum+i*@sampleCount), true
		
		@emit 'data', sample
		if ++@sampleNum > @sampleCount
			@sampleNum = 0
			@recordNum++
			
		if @recordNum <= @dataRecordCount and @state is \playing
			diff = @startTime + (@recordNum / @header.dataRecordSeconds * 1000) + (@sampleNum / @sampleCount * 1000) - new Date!.getTime!
			setTimeout ~>
				@updateLoop!
			, 0 >? diff
			
	Int32: (inc = 4) ->
		# PROBLEM: on a big endian arch, this will give bad values. we should switch depending on arch
		i = @i + 4 - inc; @i += inc;
		return @buf.readInt32LE i, true

	Double: (inc = 8) ->
		# PROBLEM: on a big endian arch, this will give bad values. we should switch depending on arch
		i = @i + 8 - inc; @i += inc;
		return @buf.readDoubleLE i, true

	Str: (len) ->
		i = @i; @i += len;
		return @buf.toString 'utf8', i, i+len .trim!

class USBDriver extends EEGDriver
	(device, opts = {}) ->
		console.log "-> USBDriver"
		super device, flags: 'w+', cb: (fd) ->
			cmd = new Buffer("eeg\n");
			Fs.write @fd, cmd, 0, cmd.length, null, (err, written, buffer) ->
				throw err if err
				console.log "mode eeg", written
				header = @driver.header!
				cmd = new Buffer header.length+1+"setheader ".length
				cmd.write "setheader "
				header.copy cmd, "setheader ".length
				cmd[*-1] = "\n"
				Fs.write fd, cmd, 0, cmd.length, null, (err, written, buffer) ->
					throw err if err
					console.log "set header", written

module.exports.EDFReader = EDFReader
module.exports.USBDriver = USBDriver