Fs = require 'fs'
Events = require 'events'
eegdriver = {} #require './eegdriver.node'

#TODO: finish up the EEGDriver
#TODO: function to return the header
#TODO: functions to start/stop
#TODO: functions to seek on percent and on milliseconds

class EEGDriver extends Events.EventEmitter
	(device, opts = {}) ->
		console.log "creating EEGDriver with:", device
		driver = @driver = new eegdriver.EEGDriver (err, data) ->
			console.log "eegdriver event: ", err, data
			if not err then @emit "data", data
		
		@stream = Fs.createReadStream device, {flags: opts.flags || 'r'}
		@stream.on 'open', (fd) ->
			console.log "opened stream", fd
			@fd = fd
			if typeof opts.cb is \function then cb 'open', fd

		@stream.on 'data', (data) ->
			if typeof opts.cb is \function then cb 'data', data
			else for x, i of data
				driver.gobble x


class EDFReader extends Events.EventEmitter
	(device, opts = {}) ->
		console.log "-> EDFReader"
		@h = {}
		@i = 0
		@recordNum = 0
		@sampleNum = 0

		data = Fs.readFileSync device
		@buf = data
		@h <<<< {
			dataFormat: @Str 8
			localPatient: @Str 80
			localRecorder: @Str 80
			recordingStartDate: @Str 8
			recordingStartTime: @Str 8
			headerRecordBytes: 1*@Str 8
			manufacturerID: @Str 44
			dataRecordCount: 1*@Str 8
			dataRecordSeconds: 1*@Str 8
			dataRecordChannels: 1*@Str 4
			chan: []
		}
		
		@h.headerRecordBytes = 256 * (@h.dataRecordChannels+1)
		ch = {
			label: 16
			transducer: 80
			dimUnit: 8
			physMin: 8
			physMax: 8
			digiMin: 8
			digiMax: 8
			prefiltering: 80
			sampleCount: 8
			reserved: 32
		}
		
		for k, v in ch
			for i from 0 til @h.dataRecordChannels
				if typeof @h.chan[i] is not \object then @h.chan[i] = {}
				vv = @Str v
				@h.chan[i][k] = if isFinite vv then 1*vv else vv
		
		@sampleCount = @h.chan[0].sampleCount
		@dataRecordChunkSize = @sampleCount*@h.dataRecordChannels*2
		@h.dataRecordCount = @dataRecordCount = Math.floor (@buf.length-@h.headerRecordBytes) / @dataRecordChunkSize
		
	start: ->
		# PROBLEM: we assume all channels have the same samples/sec. it's likely, but not assumed
		@interval = @h.dataRecordSeconds * @h.chan[0].sampleCount / 1000
		@state = 'playing'
		@startTime = new Date!.getTime! - (@recordNum / @h.dataRecordSeconds * 1000) - (@sampleNum / @sampleCount * 1000)
		@updateLoop!
		
	stop: ->
		@state = 'paused'
		
	seek: (ms) ->
		if ms <= 1 and ms >= 0
			sec = ms * @dataRecordCount * @h.dataRecordSeconds
		else
			sec = ms / 1000
		
		@sampleNum = Math.floor sec % @h.dataRecordSeconds / @sampleCount
		@recordNum = Math.floor sec / @h.dataRecordSeconds
			
	header: ->
		return @h
			
	updateLoop: ->
		sample = new Array @h.dataRecordChannels
		offset = @h.headerRecordBytes + (@recordNum*@dataRecordChunkSize)
		for i from 0 til @h.dataRecordChannels
			# PROBLEM: this isn't safe if the platform is big endian
			sample[i] = @buf.readInt16LE offset+2*(@sampleNum+i*@sampleCount), true
		
		@emit 'data', sample
		if ++@sampleNum > @sampleCount
			@sampleNum = 0
			@recordNum++
			
		if @recordNum <= @dataRecordCount and @state is \playing
			diff = @startTime + (@recordNum / @h.dataRecordSeconds * 1000) + (@sampleNum / @sampleCount * 1000) - new Date!.getTime!
			setTimeout ~>
				@updateLoop!
			, 0 >? diff
			
	Int32: (inc = 4) ->
		# PROBLEM: on a big endian arch, this will give bad values. we should switch depending on arch
		i = @i + 4 - inc; @i += inc;
		return @buf.readInt32LE i, true

	Double: (inc = 8) ->
		# PROBLEM: on a big endian arch, this will give bad values. we should switch depending on arch
		i = @i + 8 - inc; @i += inc;
		return @buf.readDoubleLE i, true

	Str: (len) ->
		i = @i; @i += len;
		return @buf.toString 'utf8', i, i+len .trim!

class USBDriver extends EEGDriver
	(device, opts = {}) ->
		console.log "-> USBDriver"
		super device, flags: 'w+', cb: (fd) ->
			cmd = new Buffer("eeg\n");
			Fs.write @fd, cmd, 0, cmd.length, null, (err, written, buffer) ->
				throw err if err
				console.log "mode eeg", written
				header = @driver.header!
				cmd = new Buffer header.length+1+"setheader ".length
				cmd.write "setheader "
				header.copy cmd, "setheader ".length
				cmd[*-1] = "\n"
				Fs.write fd, cmd, 0, cmd.length, null, (err, written, buffer) ->
					throw err if err
					console.log "set header", written

module.exports.EDFReader = EDFReader
module.exports.USBDriver = USBDriver